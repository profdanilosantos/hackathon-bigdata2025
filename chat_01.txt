# 1. Importar bibliotecas
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import datetime

# 2. Carregar os dados
df = pd.read_csv('vendas.csv')

# 3. Converter a coluna de data para datetime
df['Data'] = pd.to_datetime(df['Data'])

# 4. Criar uma variável numérica baseada na data
df['Dias'] = (df['Data'] - df['Data'].min()).dt.days

# 5. Separar variáveis independentes (X) e dependente (y)
X = df[['Dias']]
y = df['Vendas']

# 6. Dividir em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 7. Treinar o modelo
modelo = LinearRegression()
modelo.fit(X_train, y_train)

# 8. Fazer previsões
y_pred = modelo.predict(X_test)

# 9. Avaliar o modelo
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f'RMSE: {rmse:.2f}')

# 10. Visualizar os resultados
plt.figure(figsize=(10,6))
plt.scatter(df['Dias'], df['Vendas'], color='blue', label='Dados reais')
plt.plot(df['Dias'], modelo.predict(X), color='red', label='Previsão')
plt.xlabel('Dias desde início')
plt.ylabel('Vendas')
plt.title('Previsão de Vendas com Regressão Linear')
plt.legend()
plt.grid()
plt.show()

+ Resultado
Você verá um gráfico com os pontos reais de vendas e uma linha vermelha representando a tendência prevista. O RMSE (Root Mean Squared Error) indica o quão distante, em média, o modelo está dos valores reais.
